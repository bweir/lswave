#include <QCoreApplication>
#include <QString>
#include <QDebug>
#include <QFile>
#include <QFileInfo>
#include <QTextStream>

#ifndef VERSION
#define VERSION "0.0.0"
#endif

int main (int argc, char * argv[])
{
    QCoreApplication app(argc, argv);
    QCoreApplication::setOrganizationName("LameStation LLC");
    QCoreApplication::setOrganizationDomain("www.lamestation.com");
    QCoreApplication::setApplicationVersion(VERSION);
    QCoreApplication::setApplicationName(QObject::tr("wav2dat"));

	quint32 c;
	quint32 w;

	quint32 samplecount = 0;

	if (argc < 2) return 1;

    QString filename = argv[1];
    QFileInfo fi(filename);
    QString outputfilename = fi.path() + "/wav_" + fi.completeBaseName() + ".spin";

    QFile infile(filename);
    QFile outfile(outputfilename);

    if (!infile.open(QIODevice::ReadOnly))
    {
        qDebug() << "Error reading input:" << filename;
        return 1;
    }

    if (!outfile.open(QIODevice::WriteOnly))
    {
        qDebug() << "Error writing output:" << outputfilename;
        return 1;
    }

    QByteArray input  = infile.readAll();

	quint32 datasize = input.size() - 44;
    quint32 bitdepth = input[34];
	quint32 sourcesamples = datasize/(bitdepth/8);
    quint32 targetsamples = 512;
    quint32 sampleinc = (sourcesamples << 8)/targetsamples;

    qDebug() << "  file size:" << input.size() << "B";
    qDebug() << "  data size:" << datasize << "B";
    qDebug() << "  bit depth:" << bitdepth << "b";
    qDebug() << "   src size:" << sourcesamples << "B";
    qDebug() << "   dst size:" << targetsamples << "B";
    qDebug() << " sample inc:" << (sampleinc >> 8) << "." << (sampleinc & 0xFF)*100/256;

    QString output;
    QTextStream stream(&output);

    stream  << "' *********************************************************\n"
            << "' " << fi.fileName() << "\n"
            << "' generated by wav2dat " << qApp->applicationVersion() << "\n"
            << "' *********************************************************\n"
            << "PUB Addr\n"
            << "    return @wav_data\n\n"
            << "DAT\n\n"
            << "wav_data\n";

    for (quint32 i = 0; ((i >> 8) < sourcesamples) && (samplecount < targetsamples); i += (sourcesamples << 8)/targetsamples)
    {
    	if (samplecount % 16 == 0)
            stream << "\nbyte    ";
    
    	c = input[44 + (i >> 7) + 1];             // 8 bit = i >> 8
    	w = (qint8) c + 128;
    	
        stream << QString("%1").arg(w, 3);

    	if (samplecount % 16 != 15)
            stream << ", ";
    
    	samplecount++;
    }

    stream << "\n";
    qDebug() << qPrintable(output);

    QTextStream outstream(&outfile);
    outstream << output;

    outfile.close();

    return 0;
}
